name: programming
description: 'Creates a page for programming your FPGA'
on: [workflow_call]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  make-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository and
        uses: actions/checkout@v4

      - name: Download bitstream artifact
        uses: actions/download-artifact@v4
        with:
          name: bitstream
          path: gh-pages

      - name: Get BOARD file
        shell: bash
        run: |
          cp BOARD gh-pages/

      - name: Download openFPGALoader-online
        shell: bash
        run: |
          echo "downloading ..."
          wget -c https://github.com/sylefeb/openFPGALoader-online/releases/download/bucket-linux-x64/release.tgz
          echo "decompressing ..."
          tar xvfz release.tgz
          cp release/* gh-pages/

      - name: Generate HTML page
        shell: bash
        run: |
          BOARD=$(cat BOARD)
          cat << EOF >> gh-pages/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <title>FPGA programming page</title>
            <style type="text/css">
            pre {
              margin: 0;
              font-family: monaco, "Courier New", Courier, monospace;
              line-height: 1.3;
              background: black;
              color: gray;
            }
            .button {
              background-color: #f0f0f0;
              border: none;
              color: black;
              padding: 15px 32px;
              text-align: center;
              text-decoration: none;
              display: inline-block;
              font-size: 16px;
              border-radius: 8px;
            }
            .button:hover {
              background-color: #a9a9a9;
              color: white;
            }
          </style>
          </head>
          <body style="background-color: black;">
          <button class="button" id="selectAndProgramDevice">Click to select your FPGA ($BOARD)</button>
          <pre id="txtfield"></pre>

          <script type="module">
          import { AnsiUp } from 'https://cdn.jsdelivr.net/npm/ansi_up@6.0.2/ansi_up.min.js';
          window.ansiUp = new AnsiUp();
          </script>

          <script>
          var ansiText = "\\n\\033[1;97mIn progress ... please wait, the console is not refreshed during uploads...\\033[0m\\n\\n";
          var Module = {
            preRun: [function() {  }],
            'print': function(text)    {
              ansiText += text + "\\r\\n";
              niceText = window.ansiUp.ansi_to_html(ansiText);
              console.log(niceText);
              document.getElementById("txtfield").innerHTML = niceText;
              console.log(':: ' + text)
            },
            'printErr': function(text) {
              ansiText += text + "\\r\\n";
              niceText = window.ansiUp.ansi_to_html(ansiText);
              console.log(niceText);
              document.getElementById("txtfield").innerHTML = niceText;
              console.log(':: ' + text)
            }
          }
          Module['onRuntimeInitialized'] = function() {
            // download file
            var xhr = new XMLHttpRequest();
            xhr.open("GET", 'bitstream');
            xhr.responseType = "arraybuffer";
            xhr.overrideMimeType("application/octet-stream");
            xhr.onload = function () {
              if (this.status === 200) {
                FS.writeFile('/bitstream.bit', new Uint8Array(xhr.response), { encoding: "binary" });
                console.log("bitstream loaded")
              }
            };
            xhr.send();
          }
          function assert() {}
          </script>

          <script src=openFPGALoader.js></script>
          <script>
              // Request access to a USB device
              document.getElementById('selectAndProgramDevice').addEventListener('click', async () => {
                try {
                  const device = await navigator.usb.requestDevice({ filters: [] });
                  console.log(`Selected device: ${device.productName}`);
                  var ofl_board = '$BOARD'
                  if (ofl_board == 'icebreaker'
                   || ofl_board == 'icestick'
                   || ofl_board == 'icebitsy'
                   || ofl_board == 'fomu'
                   || ofl_board == 'brot'
                   || ofl_board == 'mch2022'
                   || ofl_board == 'riegel'
                  ) {
                    ofl_board = 'ice40_generic'
                  }
                  Module.callMain(['-b',ofl_board,'/bitstream.bit'])
                } catch (err) {
                  console.error(`Error: ${err}`);
                }
              });
          </script>
          </body>
          </html>
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-pages'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Check for failure
        if: failure()
        shell: bash
        run: |
          echo "Failed to deploy to GitHub Pages, please follow the link to troubleshoot: https://tinytapeout.com/faq/#my-github-action-is-failing-on-the-pages-part"

          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Error
          Failed to deploy to GitHub Pages. [Click here for instructions how to fix](https://tinytapeout.com/faq/#my-github-action-is-failing-on-the-pages-part).
          EOF

          exit 1

      - name: Link in workflow summary
        shell: bash
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          PAGE_URL=$(echo "$PAGE_URL" | sed -e 's/\/$//')
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Test your design
          [Go to the online FPGA configuration page]($PAGE_URL/index.html) (Requires WebUSB support, for instance Chrome or Edge).
          EOF
